//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `Primary`.
    static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "Primary")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primary, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `clement_image`.
    static let clement_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "clement_image")
    /// Image `hilmy_image`.
    static let hilmy_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "hilmy_image")
    /// Image `ic_calendar`.
    static let ic_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clement_image", bundle: ..., traitCollection: ...)`
    static func clement_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clement_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hilmy_image", bundle: ..., traitCollection: ...)`
    static func hilmy_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hilmy_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_calendar", bundle: ..., traitCollection: ...)`
    static func ic_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calendar, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `IngredientView`.
    static let ingredientView = _R.nib._IngredientView()
    /// Nib `IngredientsView`.
    static let ingredientsView = _R.nib._IngredientsView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IngredientView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ingredientView) instead")
    static func ingredientView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ingredientView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IngredientsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ingredientsView) instead")
    static func ingredientsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ingredientsView)
    }
    #endif

    static func ingredientView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.ingredientView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func ingredientsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.ingredientsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DayCell`.
    static let dayCell: Rswift.ReuseIdentifier<DayCell> = Rswift.ReuseIdentifier(identifier: "DayCell")
    /// Reuse identifier `GroceriesTableViewCell`.
    static let groceriesTableViewCell: Rswift.ReuseIdentifier<GroceriesTableViewCell> = Rswift.ReuseIdentifier(identifier: "GroceriesTableViewCell")
    /// Reuse identifier `IngredientsTableViewCell`.
    static let ingredientsTableViewCell: Rswift.ReuseIdentifier<IngredientsTableViewCell> = Rswift.ReuseIdentifier(identifier: "IngredientsTableViewCell")
    /// Reuse identifier `MealTableViewCell`.
    static let mealTableViewCell: Rswift.ReuseIdentifier<MealTableViewCell> = Rswift.ReuseIdentifier(identifier: "MealTableViewCell")
    /// Reuse identifier `MonthHeaderView`.
    static let monthHeaderView: Rswift.ReuseIdentifier<MonthHeaderView> = Rswift.ReuseIdentifier(identifier: "MonthHeaderView")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _IngredientView.validate()
      try _IngredientsView.validate()
    }

    struct _IngredientView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IngredientView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "minus.circle.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'minus.circle.fill' is used in nib 'IngredientView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _IngredientsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IngredientsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "plus.circle.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus.circle.fill' is used in nib 'IngredientsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let groceriesListViewController = StoryboardViewControllerResource<GroceriesListViewController>(identifier: "GroceriesListViewController")
      let homePageViewController = StoryboardViewControllerResource<HomePageViewController>(identifier: "HomePageViewController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let listOfIngredientsViewController = StoryboardViewControllerResource<ListOfIngredientsViewController>(identifier: "ListOfIngredientsViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let mealViewController = StoryboardViewControllerResource<MealViewController>(identifier: "MealViewController")
      let mealsListViewController = StoryboardViewControllerResource<MealsListViewController>(identifier: "MealsListViewController")
      let name = "Main"

      func groceriesListViewController(_: Void = ()) -> GroceriesListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: groceriesListViewController)
      }

      func homePageViewController(_: Void = ()) -> HomePageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homePageViewController)
      }

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      func listOfIngredientsViewController(_: Void = ()) -> ListOfIngredientsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listOfIngredientsViewController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func mealViewController(_: Void = ()) -> MealViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mealViewController)
      }

      func mealsListViewController(_: Void = ()) -> MealsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mealsListViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow.down.app.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow.down.app.fill' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow.right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow.right' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calendar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().groceriesListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'groceriesListViewController' could not be loaded from storyboard 'Main' as 'GroceriesListViewController'.") }
        if _R.storyboard.main().homePageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homePageViewController' could not be loaded from storyboard 'Main' as 'HomePageViewController'.") }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().listOfIngredientsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listOfIngredientsViewController' could not be loaded from storyboard 'Main' as 'ListOfIngredientsViewController'.") }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().mealViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mealViewController' could not be loaded from storyboard 'Main' as 'MealViewController'.") }
        if _R.storyboard.main().mealsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mealsListViewController' could not be loaded from storyboard 'Main' as 'MealsListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
